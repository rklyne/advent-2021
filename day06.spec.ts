import { countBy, range, sum } from "ramda";

type FishState = Record<string, number>;

const fillState = (upTo: number, initial: number = 0): FishState => {
  const state: Record<string, number> = {};
  range(0, upTo + 1).forEach((n) => {
    state[`${n}`] = initial;
  });
  return state;
};

const makeFishData = (inputData: number[], upTo: number = 8): FishState => {
  return {
    ...fillState(upTo),
    ...countBy((n) => `${n}`)(inputData),
  };
};

const total = (state: FishState): number => {
  return sum(Object.values(state))
}

const playCycle = (fishState: FishState): FishState => {
  return {
    "0": fishState["1"],
    "1": fishState["2"],
    "2": fishState["3"],
    "3": fishState["4"],
    "4": fishState["5"],
    "5": fishState["6"],
    "6": fishState["7"] + fishState["0"],
    "7": fishState["8"],
    "8": fishState["0"],
  };
};

const playCycle2 = (fishState: FishState): FishState => {
  return {
    ...Object.fromEntries(
      Object.entries(fishState).filter(([k, v]) => k != "0").map(([k, v]) => [`${parseInt(k)-1}`, v])
    ),
    "6": fishState["7"] + fishState["0"],
    "8": fishState["0"],
  }
  return {
    "0": fishState["1"],
    "1": fishState["2"],
    "2": fishState["3"],
    "3": fishState["4"],
    "4": fishState["5"],
    "5": fishState["6"],
    "6": fishState["7"] + fishState["0"],
    "7": fishState["8"],
    "8": fishState["0"],
  };
};

const playCycles = (
  startState: FishState,
  cycles: number,
  playCycle: (state: FishState) => FishState
): FishState => {
  return range(0, cycles).reduce((state) => playCycle(state), startState);
};

describe("day 6", () => {
  it("computes day by day", () => {
    expect(playCycle(makeFishData([2, 3, 2, 0, 1]))).toStrictEqual(
      makeFishData([1, 2, 1, 6, 0, 8])
    );
  });

  it("computes day by day part 2", () => {
    expect(playCycle2(makeFishData([2, 3, 2, 0, 1]))).toStrictEqual(
      makeFishData([1, 2, 1, 6, 0, 8])
    );
  });

  it("part 1", () => {
    expect(total(playCycles(makeFishData(inputData), 80, playCycle2))).toBe(
      "the answer"
    );
  });

  it("part 2", () => {
    expect(total(playCycles(makeFishData(inputData), 256, playCycle2))).toBe(
      "the answer"
    );
  });
});

const inputData = [
  1,
  3,
  4,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  2,
  2,
  1,
  4,
  2,
  4,
  1,
  1,
  1,
  1,
  1,
  5,
  4,
  1,
  1,
  2,
  1,
  1,
  1,
  1,
  4,
  1,
  1,
  1,
  4,
  4,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  2,
  4,
  1,
  3,
  1,
  1,
  2,
  1,
  2,
  1,
  1,
  4,
  1,
  1,
  1,
  4,
  3,
  1,
  3,
  1,
  5,
  1,
  1,
  3,
  4,
  1,
  1,
  1,
  3,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  5,
  2,
  5,
  5,
  3,
  2,
  1,
  5,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  2,
  1,
  1,
  1,
  1,
  5,
  1,
  1,
  1,
  1,
  5,
  1,
  1,
  1,
  1,
  1,
  4,
  1,
  1,
  1,
  1,
  1,
  3,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  3,
  1,
  2,
  4,
  1,
  5,
  5,
  1,
  1,
  5,
  3,
  4,
  4,
  4,
  1,
  1,
  1,
  2,
  1,
  1,
  1,
  1,
  1,
  1,
  2,
  1,
  1,
  1,
  1,
  1,
  1,
  5,
  3,
  1,
  4,
  1,
  1,
  2,
  2,
  1,
  2,
  2,
  5,
  1,
  1,
  1,
  2,
  1,
  1,
  1,
  1,
  3,
  4,
  5,
  1,
  2,
  1,
  1,
  1,
  1,
  1,
  5,
  2,
  1,
  1,
  1,
  1,
  1,
  1,
  5,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  5,
  1,
  4,
  1,
  5,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  2,
  1,
  1,
  1,
  1,
  5,
  4,
  5,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  5,
  1,
  1,
  3,
  1,
  1,
  1,
  3,
  1,
  4,
  2,
  1,
  5,
  1,
  3,
  5,
  5,
  2,
  1,
  3,
  1,
  1,
  1,
  1,
  1,
  3,
  1,
  3,
  1,
  1,
  2,
  4,
  3,
  1,
  4,
  2,
  2,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  5,
  2,
  1,
  1,
  1,
  2,
];
