from typing import *
import time
import unittest

Pixel = Literal[1, 0]
Image = List[List[Pixel]]
Coord = Tuple[int, int]

def makeImage(txt: str) -> Image:
    return [
        list(map(charToBin, row.strip()))
        for row in txt.strip().split("\n")
    ]

def makeEnhanceMap(txt: str) -> List[Pixel]:
    m = list(map(charToBin, txt.strip()))
    assert len(m) == 512
    return m

def pixelCount(image):
    return sum(map(sum, image))

def charToBin(c: str) -> Pixel:
    if c == '#':
        return 1
    if c == '.':
        return 0
    raise RuntimeError(c)

def coords(image, extra=1):
    yMax = len(image)
    xMax = len(image[0])
    for x in range(-extra, xMax+extra):
        for y in range(-extra, yMax+extra):
            yield (x, y)

def getPixelsSurrounding(x, y) -> List[Coord]:
    return [
        (x-1, y-1), (x, y-1), (x+1, y-1),
        (x-1, y  ), (x, y  ), (x+1, y  ),
        (x-1, y+1), (x, y+1), (x+1, y+1),
    ]

def cloneCanvas(image, growth):
    yMax = len(image) + growth
    xMax = len(image[0]) + growth
    rows = []
    for _ in range(yMax):
        rows.append([0] * xMax)
    return rows

def getPixel(image, x, y, fail=False):
    try:
        return image[y][x]
    except IndexError:
        if fail:
            raise
        return image[0][0]

def growImage(imageIn, extra):
    image = cloneCanvas(imageIn, extra * 2)
    for y in range(len(imageIn)):
        for x in range(len(imageIn[0])):
            image[y+extra][x+extra] = imageIn[y][x]
    return image

def enhance_image_1(image, enhancement):
    outImage = cloneCanvas(image, 2)
    for x, y in coords(image):
        binary = ''.join([str(getPixel(image, inX, inY)) for inX, inY in getPixelsSurrounding(x, y)])
        number = int(binary, 2)
        outpixel = enhancement[number]
        outImage[y+1][x+1] = outpixel
    return outImage

def enhance_image_2(image, enhancement):
    outImage = cloneCanvas(image, 2)
    for x, y in coords(outImage, 0):
        binary = ''.join([str(getPixel(image, inX-1, inY-1)) for inX, inY in getPixelsSurrounding(x, y)])
        number = int(binary, 2)
        outpixel = enhancement[number]
        outImage[y][x] = outpixel
    return outImage

def enhance_image_3(imageIn, enhancement, grow=True):
    if grow:
        image = growImage(imageIn, 1)
    else:
        image = imageIn
    outImage = cloneCanvas(image, 0)

    for x, y in coords(image, 0):
        binary = ''.join([str(getPixel(image, inX, inY)) for inX, inY in getPixelsSurrounding(x, y)])
        number = int(binary, 2)
        outpixel = enhancement[number]
        outImage[y][x] = outpixel
    return outImage


enhance_image = enhance_image_3

def imageToString(image):
    return '\n'.join([
        ''.join([
            '#' if pixel else '.'
            for pixel in row])
        for row in image])


def printImage(image, delay=0):
    print("")
    print(imageToString(image))
    print("")
    time.sleep(delay)

def multi_enhance(image, enhancement, steps, print_delay=None):
    print(f" >> [ {pixelCount(image)} ] start pixels")
    image = growImage(image, steps)
    for step in range(steps):
        image = enhance_image(image, enhancement, grow=False)
        if print_delay is not None:
            printImage(image, delay=print_delay)
        print(f" >> [ {pixelCount(image)} ] step {step+1} pixels")
    return image


class Tests(unittest.TestCase):
    testImage = makeImage("""
        #..#.
        #....
        ##..#
        ..#..
        ..###
    """)
    testMap = makeEnhanceMap("""
..#.#..#####.#.#.#.###.##.....###.##.#..###.####..#####..#....#..#..##..###..######.###...####..#..#####..##..#.#####...##.#.#..#.##..#.#......#.###.######.###.####...#.##.##..#..#..#####.....#.#....###..#.##......#.....#..#..#..##..#...##.######.####.####.#.#...#.......#..#.#.#...####.##.#......#..#...##.#.##..#...##.#.##..###.#......#.#.......#.#.#.####.###.##...#.....####.#..#..#.##.#....##..#.####....##...##..#...#......#.#.......#.......##..####..#...#.#.#...##..#.#..###..#####........#..####......#..#
    """)

    def test_grow(self):
        self.assertEqual(
            [[0]*3,[0,1,0],[0]*3],
            growImage([[1]], 1)
        )

    def testExpand1(self):
        expected = makeImage("""
            .##.##.
            #..#.#.
            ##.#..#
            ####..#
            .#..##.
            ..##..#
            ...#.#.
        """)
        actual = enhance_image(self.testImage, self.testMap)
        print(imageToString(actual))
        self.assertEqual(imageToString(expected), imageToString(actual))

    def testExpand2(self):
        expected = makeImage("""
            .......#.
            .#..#.#..
            #.#...###
            #...##.#.
            #.....#.#
            .#.#####.
            ..#.#####
            ...##.##.
            ....###..
        """)
        actual = multi_enhance(self.testImage, self.testMap, 2)
        print(imageToString(actual))
        self.assertEqual(imageToString(expected), imageToString(actual))

    def test_enhance_and_count(self):
        actual = multi_enhance(self.testImage, self.testMap, 2)
        self.assertEqual(35, pixelCount(actual))

    def test_enhance_and_count_2(self):
        actual = multi_enhance(self.testImage, self.testMap, 50)
        self.assertEqual(3351, pixelCount(actual))

    def test_coords(self):
        self.assertEqual(9, len(list(coords([[0]], 1))))
        self.assertEqual(1, len(list(coords([[0]], 0))))
        self.assertEqual([(1, 1)], list(coords([[0,0,0]]*3, -1)))

    def test_pixel_count(self):
        self.assertEqual(8, pixelCount(makeImage(
            '######.##'
            )))
        self.assertEqual(8, pixelCount(growImage(makeImage(
            '######.##'
            ), 6)))

    def test_pixels_surrounding(self):
        image = [
            [1, 2, 3],
            [4, 5, 6],
            [7, 8, 9]
        ]
        self.assertEqual(
            [1,2,3,4,5,6,7,8,9],
            [getPixel(image, x, y) for (x, y) in getPixelsSurrounding(1, 1)]
        )

    def test_parse_print(self):
        self.assertEqual(makeImage(imageToString(inputImage)), inputImage)

    def test_real_map(self):
        image = [[0,0,0],[0,1,0],[0,0,0]]
        nextImage = multi_enhance(image, inputEnhancement, 2, 0)
        printImage(nextImage)
        self.assertEqual(15, pixelCount(nextImage))


def part1():
    image = inputImage
    image = growImage(image, 10)
    image = multi_enhance(image, inputEnhancement, 2, print_delay=0)
    return pixelCount(image)

def part2():
    image = inputImage
    image = growImage(image, 2)
    image = multi_enhance(image, inputEnhancement, 50)
    return pixelCount(image)

def part_guess():
    image = multi_enhance(inputImage, inputEnhancement, 100, print_delay=4)
    return pixelCount(image)


inputEnhancement = makeEnhanceMap("""

    """)

inputImage = makeImage("""
##.#.#..#..#####.#####.#.#..###...##.##..####.#####.##.#.#.##....##..##...#..##..####...##.#.#.##...
#.#..#.#.##.##......##..##.#.##...##.#.#...##.##...###.##.##.#...##.###....#..#..######..####..#####
...#.#.##.#.#......##.#.###..#.###......#...#.#.#..#.###..#..######...#.#..#...###.####.########.##.
...##....#...##...####...#.#...##.#...##..##.#.####..#.##..#..#......##....###.#.#..####.#...###....
..####.#..#.....#....##.#.#...#..#.######.##.###..###..#.##...#..##.#.#.##.######..######.##.####.##
##.##.##.#.#.##.#................#....#..######.....#.....##.###.#..#.###.###.#..###.#.#...##.#..###
.#..#.....##.###...#..###.###..#..#######.#.....##..#.#..###.#.#.#.#..###.#.#......#.##.#.###..#.##.
#..##########..#.#..###.##.#.#..#######...#..###.#..#.....#...#...#.#....#...##....#..####.####.#..#
.####..#.#....###..###.##.....####.##.#.#..######.......#########.#..###.###.#####...##..###..##.###
...##.##.##...#.#..#..###..##.#.###..#.##.#.....####.#....########.#.#..#.#.##....######...#......#.
...#...##.#.##....##.#..####..##.###.#.#.###.....###.#...###..#...#.#...#.#..#...#.#.#######.##.##.#
...##.##.#.#.....###.#.###.#.#.#..##...##...###...##.###..#.#...#....#.###.#....##....#...#.##..##..
.#..##.#.#..#..###.#.##..###..#.#..#.#...#.#..##..#####.#..#....#.#.#..#.####..#.#.#..###.....#.##..
.#....##.##....#..###..####.#...###..#.#..###.##.##.#..##.#.##....##..###.##..#..###.###.#.#.##..#.#
..###.##.##..###..##.##.#.#..#.##.#.#..###......#.##.#.##......#.####.#..##.####.#...#..###.#..##.##
.##...####.#....###......#..##.#.#.##.####....#.##.#.#..#####..#...##..#..##............#..##..#...#
####.#.....###.##.#...##.#.#..........#.....#.#..#......#....#######..#.#########.#..###.......###.#
#.#.##...##.#..#.#.....##..#.####.....######....##.#####...#.#...##.##.###....###.#..##.##.#...##.#.
.#.#######..#.##.###.##.#.###...#.#####.#.....##........##..##..###.#...###.####...##..#.######..#..
#.####.###.##..##..#####..#.#..#..##........##.#.....#...##.#...#...##..##...##..##.#.#########.#.##
##..#.##...###.##.#.###.#...###..#.#..#.#..#.#...###..#.###...#######.#...#.#....#..###..#...####...
#.#..##..#..####.#.#.#..#..#.#.#...#######.##.#.####.#.#..######.#...#.#.#....#.#...#.#.#..#..######
#######.##..##.#..###..#..#............#...###...####..#........#####.########..##.##..##.#.#.....#.
#..#.###.#..#..#.#..##.##.#..#.####.##..#..###.#.#.#.#...#.###..##.###.###.####........#...#####.##.
.....#.........#.#..#..#.##.....#####.###.##.#.#...##.##..#.#.#.######..#####..#.#..##.#####......#.
#..#.##..##......##....##.####.#.#.##..#.##.#..#...####..##..####.####...##.###.....#...##.#.#######
###.####.#..##...###.##.#..###.#..#....##....#..#..#...#.#.#.#.#.####.#...#.#.##..........#####..###
#.#..####.##..#.##.###...##.#..#..##.#..#.##.##..#..###..##......#.##.####..##.#.##.##.##..#..#.###.
..##.###..#..#....###.....#..#...#..#.#..######.#####.##.##.........#.###.#...#..#.##......#.#.#..##
..###.....####.#.##..###.###..##..#..###.##..#....#.#.##.#####.#...#..##.##.###.##...#..#####..#.###
.#.#.##.#..##......#..#########...#.#.##.###....###.###.##.......#######..#..####...##.#.#......##.#
..###..##..#.#.##.#..###.#..##..#######...#...#.#.##.##....#.#.#.##..#..####.##.#....###...#.....#.#
...##..#.#.#...##.##.##.#######.#..###...#....#..##......##...#.##.##.####...#.#.#.#...##.#.#.....#.
###...##.#....###..###....##..#.###.#.#..#.#..#.#.#....##.##....##.######.####.#..####..##....#..###
##.#.###..##.######.#.....#.##..#.#.#.#.#...##..##....##.###..##.#..#.#.#..###..##.#.###.###.#.##...
.#.#.##....#...#####.#.##.......#..#...##.##.#.#.###.#.##.##.#######.#######...###..#..###.####..#.#
###..####..#####..#.#..##..#.#.##.....#.#...#..#.#..#.###.#..##.#.#...##.#...#.##..####..##....####.
.###.#..##...#.##.#...#.##..#.#.##.###.###..###.#####....####.#..##.#.#.#.##..#.#.#....#.#.#.#.#..##
.###..#.....##.#..####.#...##...##..#....##..##..##.#..##.#...###.#.#.#.##.#..#..#.####...##.#..####
#..######.###...##......#...#.#.###.#..#.###..#.####.#..#......###.##....##.###.####..####.#.#.##...
.###.####.#.###...#.###.#.........#.#.#..###.##..##.###...####..#.#.##...#.###.....###.#..##..#.#...
..#.#####..##.#.##...#...#......#.##....####.#..####.##.####..#.#....######...#.#.#.##.###.##..#...#
#..#.#....####.#..#.....#...####....##.#.##..#....#..##..##.#...###.##....##.##..###..#.##..#####..#
#####.####.#####.##.##.####.#.####.#..#.###..#.#..#..#....#..##...#....#.#..####..###..##.##...####.
.......###.#.#.##....#...#..#......#...##.##..#....#####.##.#..#####..#..#.#.##.##.#..#.####..#.....
..####.###.###...##...#..#....#....###.####....#.#..###...####.####.#.#....##...##.#.####.#....##.#.
....#.##.#.##..#.#...##.####.#...#.#.##....#.##.#....#...####.#.###.##..#...#..#.##....##..#.....###
.....#.####.##.#.##.###......#...##..#..##...#..###.##..####.#...#.#..#..#.#.##...#.##.#####.##.##.#
#.#####....##.#.##..#..##.####.#.#.#####.######.###.#.##.##..##..####..#.#..###..#.###.#..##..####..
.##.#.#...####....##.#.###.###..#......###.##.####..#####.#.#.#.....####..#.....##......##....###..#
.#..#..#.#####.#.#.#..#..#...##...#####.###.#.#..##.###.###.....#.#.....##...###.###..##.....#..##.#
#.#.####...#.###...###..#.###.#..##.###.#..#.##.#.#..##..##.#...##.#####.####.#..#...##...####.#..##
##.##.###..##..#..#..###..#.##.#.#..####....#..#..#...#.#..##.#.#..#..#..##..####.#.##......#...#..#
..#####.##...#..#.###....#.#.###..#...##....###.#####.#####.##.##.###....#..##.#.##.##.#...####..###
.#.####.#..##..#######...##.#..#.####..#....###...#....#.#....#...#.#..#.####.#.#.#....#.....#.##.##
.....##.###......##.##....##..##.....##.##....#.##.###....#..#.#...#..####....##.#.#.##..##.##.##...
#...####.#.####.###.##..##...##.#....###.#...##.###...##.#.####.##.#..#..#..#..#....#.#.##.#......#.
#.#...#.#..#.#..######.##....##.###..##.#.#..#..######..#.##.#....##.#...#...##......#...#.#..##...#
.#...##.....##..#.##.###.##..#..###.#..#.#.......#####.####...#.#......###.###..#....##..#..#..#.##.
#...#####..........#.#..##.#...#.###.##..#.#.#.##..###.###.....#..##.....#....#.##.###.##.#..#####..
.#.......#.#.....####.##..##.#...#..##....######.#.#.##....#...#..#.###.#....#...#..#.##.######...#.
##.#.#####.##..##....#.###..#..#.#.....##.....#..#.#....#.#...##...#...###.###.....###..##.##.#.#..#
...##...####.####..##..###.........#.###.###..#..#.....#.##.####.##..##.######.#.#...#.#..##.####.#.
..######.#....####.##..#.#.##.#....###..########..#.#..####.##.#..#......##.#..######.#.#.#.#.#..###
.###.#..####..#..#...##...#####.#.###.###.##..##.#...#.#..#...#.####.##.#.#####.##.##.#.#.#######...
###..##..######...#...#######...####..###..##..#..........####.#..#..##.#..##..#####..##.#..#.#..##.
.#####....###.#.....##..#....###..##.#..#...##....####..#.###.....##...#.##....######..##..#.....###
#..##.#.####.#..#.#..#..#.#..#.#...#.####...##.#.#####.#..#...###.######.....#.####..#..#####...#..#
#...#..###....####..#.#..######.#..#.#.##...#..####...#.#....###.###.#.##.#####.#.....####...#####..
##..#.#..#.......##..####..#.##.#######...#.###.#..##.##.#......#.##.###.#..##.#.#.#####...#########
.....#....#...#..##.#....##..##...###..###.###########....#.#.#..##....#.#.##..#.####..#.####.###.##
.#.##.###...#.#.##.###.######..#..##...####..###..#..#.....###.#.#....##..###.#.##....#..####.#...#.
#..#..#######.#.#..#.#.###..##.#....#..#...#.#.#.###.#..#.#..#..#####..#.#.#...##.#..#..#..##..##...
...#.##...###..##..#.######.#.###..##.######.#.#.###..#.#..###.#.##.....####.#...#.#.#.###.##...#..#
#.#.#...#.#....#.#...#...#...#.#.#..###...##..#.......#...#.######.##....#...###..#..#####.#.......#
#...##.#..##.##.#.#......#.#..#.######.#...#.##.###...#.#...#..###....##.###.#....#..##...######...#
.#...####..#####....#..#.##.##...##.#..#..##.#...#..###........#........#.####..#.#.####.#.#.#..####
.##.##..#.##..#####.#.##.##.#.####.#....#..#..#..##.###.##..#.##.##....###.#..#..#.#..#...#.##...##.
.##...##.#.#....####...#.#.##.####..#..#####.#..#....#..#....####.#.###.##.#....##.####.#.##.#####.#
.#.#.####...######.#...#...#.#..##.#..##.#.###.##.#.#..##..#.###.##.###.###..###.###...#.##.#..####.
.###.#..####....####.##..##.#.#.#..##.....###...##.###.##....##.#.###..######..####...###.#.#..#...#
#.###.#..#...#.##.#...#.#.#.##.###.#.#..######.#..##.#.####.##..#..###.######.##..###..#.....##...##
#...#####...#...#.##.#######..###.#..###.##...#..#...##.#.###.##.##....##..####.#..#...#.##.#.#####.
...#...#####....##..#.##.###.#.####..#.##...##.###.......#.##.###...###....####..#.#####.##.#..#..#.
#......##....##...##.#..##...#.#.##.##..#...#.###..#......#..###.###.#..#.#.#.####..#.###.#..##..##.
....#.##.#......#####..#.###...#..#..#.##......##.##..####.#..#....###.####..#...##.#.#.##..##.###.#
......#.##..#.......#.#....#...#..#.#......#.....##..#....####.#####....##.###......###.####.##..#.#
..#..#..###.#.#####.#..#.####...##.....#.#...#.#..#.#..##......#.....##.....#...#.##.##..##..#..#..#
#..#..#.##..#.#.#.#.#...###....#..#.#...##.#.#..#######.#..#.##...##..#..###.#.##.###...#.###..#...#
.##.##.#..#.#..##.#.#..##.#...###...#...#...####..#..#.#.##..##.##.##.##.#..##...###...#..#.#.##....
#..#.#..#.#..####..#.#......##.####.##.#..####.##..###.#.##...##.#.#.#####..###....#.#..#.#.#.#.##.#
..##.#....#...#.#..#.##...#....#.###..#.#...#.#.###...#..#.#####.#......##..#..#.###.###.....#.#..#.
###.....###...##.#........#..###.##..#.##.#.#.####.#.###...###..#.#.#####.#..#....#.#.##.#..######.#
#.#..###.#.####..##.....#.#..########.#.####.....##..#.#.#..##...#.#.###...#.........###..##.#.##...
#...##...##.###.##.###..#.##.#.##...#####...###.##....##.#.#.....#.....#.###.#.######.#....#.#..#..#
.##....#..#...#.#...###.#..#...###..#...##....#.#..#.#..##..##.##.##.#...#.#..#.##..#.#.##.##.##.#.#
.#...#..#.#.##.####.##..##.....##.##.##..#...#....#.#..##..##..#...###..#.###.##..#....##.#.#....###
...#....#.####..#..#.#.#.###..###.#.#####.##.###.....#..#.##.#.###..#.##.##...#...#..#..##.#.##.#...
...#...#...#...##..#....#..##..###.#.##.####..#.###..##...#....#####..##....######.####...#.....##.#
#.#####.###.#.#.##..#...###.##..#..#.####.#.##.###.#..#...##.##..#.##.##..##....##..#..##..#.#.####.

""")

if __name__ == '__main__':
    print("\n\n >>>> MAIN <<<<\n")
    print(part1())
    print(part2())
