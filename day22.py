import unittest
from typing import *

OnOff = Literal['on', 'off']
ON: OnOff = 'on'
OFF: OnOff = 'off'

Pair = Tuple[int, int]
Coord = Tuple[int, int, int]
Box3D = Tuple[Pair, Pair, Pair]
Instruction = Tuple[OnOff, Box3D]
Input = List[Instruction]
# Boundaries = Tuple[List[int], List[int], List[int]]
Boundaries = Box3D

def countOn1(instructions: Input, box: Box3D):
    ins = list(reversed(instructions))
    total = 0
    for x in range(*box[0]):
        for y in range(*box[1]):
            for z in range(*box[2]):
                for i in ins:
                    onoff, ibox = i
                    if inBox(ibox, (x, y, z)):
                        if onoff == ON:
                            total += 1
                        break
    return total

def countOn1b(instructions: Input, boundaries:Tuple[List[int], List[int], List[int]]):
    print(f" >> starting with measures ({len(boundaries[0])}, {len(boundaries[1])}, {len(boundaries[2])})")
    print(boundaries)
    output: Set[Box3D] = set()
    for onoff, (xs, ys, zs) in instructions:
        cxrange = filterRange(boundaries[0], xs)
        cyrange = filterRange(boundaries[1], ys)
        czrange = filterRange(boundaries[2], zs)
        these_cubes = [
            (cxs, cys, czs)
            for cxs in zip(cxrange, cxrange)
            for cys in zip(cyrange, cyrange)
            for czs in zip(czrange, czrange)
            if not all([pair[0] == pair[1] for pair in [cxs, cys, czs]])
        ]

        # print(f" >>> turning {onoff} with {len(these_cubes)} cubes")
        if onoff == ON:
            output = output.union(these_cubes)
        else:
            output -= set(these_cubes)
    # print(f"output cubes {len(output)}")

    return sum(cube_size(cube) for cube in output)

def filterRange(lst: List[int], range: Pair) -> List[int]:
    (min, max) = range
    return [x for x in lst if x >= min and x <= max]

def cube_size(cube: Box3D) -> int:
    xs, ys, zs = cube
    size = (xs[1] - xs[0] + 1) * (ys[1] - ys[0] + 1) * (zs[1] - zs[0] + 1)
    return size

def countOn2b(instructions: Input, boundaries:Boundaries):
    print(f" >> starting with measures ({len(boundaries[0])}, {len(boundaries[1])}, {len(boundaries[2])})")
    print(boundaries)
    output: Set[Box3D] = set()
    for onoff, (xs, ys, zs) in instructions:
        cxrange = filterRange(boundaries[0], xs)
        cyrange = filterRange(boundaries[1], ys)
        czrange = filterRange(boundaries[2], zs)
        these_cubes = [
            (cxs, cys, czs)
            for cxs in zip(cxrange, cxrange[1:])
            for cys in zip(cyrange, cyrange[1:])
            for czs in zip(czrange, czrange[1:])
        ]

        # print(f" >>> turning {onoff} with {len(these_cubes)} cubes")
        if onoff == ON:
            output = output.union(these_cubes)
        else:
            output -= set(these_cubes)
    # print(f"output cubes {len(output)}")

    return sum(cube_size(cube) for cube in output)

def countOn2(instructions: Input, box: Box3D):
    def coords(n: int):
        cs = set()
        def add(x):
                cs.add(min(max(x, box[n][0]), box[n][1]))
        for _, tpl in instructions:
            # print(f"TPL: {tpl}")
            add(tpl[n][0])
            add(tpl[n][1])
        return list(sorted(cs))
    return countOn2b(
        instructions,
        (coords(0), coords(1), coords(2))
    )

countOn = countOn1

def inBox(box: Box3D, point: Coord):
    for (l, r), p in zip(box, point):
        assert l <= r
        if p < l or p > r:
            return False
    return True

def clamp(box: Box3D, bounds: Box3D) -> Box3D:
    def _clampPair(pair: Pair, bound: Pair) -> Pair:
        return min(max(bound[0], pair[0]), bound[1]+1), max(min(bound[1], pair[1]), bound[0]-1)

    res: Box3D = tuple([_clampPair(pair, bound) for (pair, bound) in zip(box, bounds)])  # type: ignore
    # print(f"clamp({box}, {bounds})  => {res} @{cube_size(res)}")
    return res

overlap = clamp

def parseInstructions(lines):
    for line in lines.strip().split("\n"):
        onoff, rest = line.strip().split(" ", 1)
        box: Box3D = tuple([tuple(pair[2:].split("..")) for pair in line.split(",")])
        instrs.append((onoff, box))

class Boxes(object):
    def __init__(self, bounds: Boundaries):
        self.adds: List[Box3D] = []
        self.subs: List[Box3D] = [bounds]
        self.bounds = bounds

    def switch(self, instr: Instruction):
        if instr[0] == ON:
            self.add(instr)
        else:
            self.sub(instr)

    def _clamp(self, box: Box3D) -> Box3D:
        return clamp(box, self.bounds)

    def add(self, instr: Instruction):
        box = instr[1]
        if cube_size(overlap(box, self.bounds)) == 0:
            return
        new_adds = [box]
        new_subs = []
        for over in [overlap(box, add) for add in self.adds]:
            if cube_size(over) == 0:
                continue
            new_subs.append(over)
        for over in [overlap(box, sub) for sub in self.subs]:
            if cube_size(over) == 0:
                continue
            new_adds.append(over)
        self.adds.extend(new_adds)
        self.subs.extend(new_subs)

    def _swap(self):
        self.adds, self.subs = self.subs, self.adds

    def sub(self, instr: Instruction):
        self._swap()
        self.add(instr)
        self._swap()

    def countOn(self):
        return (sum(map(cube_size, map(self._clamp, self.adds))) - sum(map(cube_size, map(self._clamp, self.subs))) + cube_size(self.bounds)) // 2

def countWithBoxes(instructions: Input, bounds: Boundaries) -> int:
    boxes = Boxes(bounds)
    for instr in instructions:
        boxes.switch(instr)
    return boxes.countOn()

class TestBoxes(unittest.TestCase):
    def test_count(self):
        self.assertEqual(
            8,
            countWithBoxes(
                [(ON, ((0, 1), (0, 1), (0, 1), ))],
                ((-2, 2), (-2, 2), (-2, 2)),
            )
        )

    def test_count_off(self):
        self.assertEqual(
            6,
            countWithBoxes(
                [
                    (ON, ((0, 1), (0, 1), (0, 1), )),
                    (OFF, ((0, 1), (1, 1), (1, 1), )),
                ],
                ((-2, 2), (-2, 2), (-2, 2)),
            )
        )

    def test_count_big(self):
        self.assertEqual(527915, countWithBoxes(myInput, fiftyBox))

    def test_clamp(self):
        self.assertEqual(1, cube_size(clamp(((1,1), (1,1), (1,1)), ((1,1), (1,1), (1,1)))))
        self.assertEqual(1, cube_size(clamp(((1,1), (1,1), (1,1)), ((1,2), (1,2), (1,2)))))
        self.assertEqual(0, cube_size(clamp(((1,1), (1,1), (1,1)), ((2,2), (1,2), (1,2)))))

    def test_overlap(self):
        self.assertEqual(
            ((1, 1), (1, 1), (1, 1)),
            overlap(
                ((1, 1), (1, 1), (1, 1)),
                ((1, 1), (1, 1), (1, 1)),
            )
        )
        self.assertEqual(
            ((1, 1), (1, 1), (1, 1)),
            overlap(
                ((0, 1), (0, 1), (0, 1)),
                ((1, 2), (1, 2), (1, 2)),
            )
        )
        self.assertEqual(
            0,
            cube_size(overlap(
                ((5, 5), (5, 5), (5, 5)),
                ((1, 2), (1, 2), (1, 2)),
            ))
        )
        self.assertEqual(
            0,
            cube_size(overlap(
                ((5, 5), (5, 5), (0, 1)),
                ((1, 2), (1, 2), (1, 2)),
            ))
        )

class Tests(unittest.TestCase):
    def test_count(self):
        self.assertEqual(
            8,
            countOn(
                [(ON, ((0, 1), (0, 1), (0, 1), ))],
                ((-2, 2), (-2, 2), (-2, 2)),
            )
        )

    def test_count_off(self):
        self.assertEqual(
            6,
            countOn(
                [
                    (ON, ((0, 1), (0, 1), (0, 1), )),
                    (OFF, ((0, 1), (1, 1), (1, 1), )),
                ],
                ((-2, 2), (-2, 2), (-2, 2)),
            )
        )

    def test_fiterRange(self):
        self.assertEqual(list(range(4,6+1)), filterRange(range(12), (4,6)))

    def test_count_2(self):
        self.assertEqual(
            8,
            countOn2(
                [(ON, ((0, 1), (0, 1), (0, 1), ))],
                ((-2, 2), (-2, 2), (-2, 2)),
            )
        )

    def test_count_2_off(self):
        self.assertEqual(
            6,
            countOn2(
                [
                    (ON, ((0, 1), (0, 1), (0, 1), )),
                    (OFF, ((0, 1), (1, 1), (1, 1), )),
                ],
                ((-2, 2), (-2, 2), (-2, 2)),
            )
        )

    def test_count_2_big(self):
        self.assertEqual(527915, countOn2(myInput, fiftyBox))

fiftyBox: Box3D = ((-50, 50),(-50, 50),(-50, 50),)

def part1():
    return countWithBoxes(myInput, fiftyBox)

def part2():
    Mill = 1000000
    return countWithBoxes(myInput, ((-Mill, Mill),(-Mill, Mill),(-Mill, Mill),))

myInput: Input = [
    (ON, ((-8, 36), (-13, 38), (-30, 18))),
    ('on', ((-21, 27), (-43, 1), (-28, 20))),
    ('on', ((-43, 8), (-35, 16), (-21, 29))),
    ('on', ((-14, 33), (1, 46), (-33, 20))),
    ('on', ((-20, 24), (-32, 18), (-44, 3))),
    ('on', ((-31, 13), (-24, 24), (-13, 41))),
    ('on', ((-34, 17), (-24, 25), (-32, 21))),
    ('on', ((-21, 29), (-40, 14), (-34, 19))),
    ('on', ((-11, 41), (-46, 3), (-22, 25))),
    ('on', ((-13, 41), (-20, 32), (-26, 21))),
    ('off', ((34, 48), (-8, 6), (-47, -32))),
    ('on', ((-36, 16), (-25, 29), (-42, 10))),
    ('off', ((-27, -10), (20, 38), (-32, -15))),
    ('on', ((-43, 7), (-3, 46), (-13, 41))),
    ('off', ((-21, -10), (-5, 7), (-34, -24))),
    ('on', ((-47, 2), (-26, 19), (-30, 19))),
    ('off', ((2, 18), (39, 48), (34, 49))),
    ('on', ((-29, 21), (-28, 19), (-14, 39))),
    ('off', ((-12, 1), (-15, -6), (-12, 5))),
    ('on', ((-33, 11), (-5, 40), (-19, 34))),
    ('on', ((4839, 37119), (-77870, -65928), (-31721, 6883))),
    ('on', ((-65074, -45532), (-76161, -55995), (18422, 28809))),
    ('on', ((-19046, 7513), (65962, 85040), (-50719, -38025))),
    ('on', ((31203, 42162), (42926, 64021), (25628, 44570))),
    ('on', ((-23080, -9369), (20501, 49221), (70364, 78911))),
    ('on', ((11385, 44807), (56888, 76379), (2197, 23866))),
    ('on', ((17447, 25479), (-59366, -48603), (-63221, -43855))),
    ('on', ((34953, 56079), (-72829, -39611), (24187, 47582))),
    ('on', ((3553, 21317), (-69977, -55642), (38791, 44119))),
    ('on', ((-57043, -43446), (-62985, -45094), (-46766, -23033))),
    ('on', ((-66953, -46125), (7548, 20111), (36275, 67691))),
    ('on', ((48156, 52160), (-57159, -48177), (-27750, -17451))),
    ('on', ((-8199, 9720), (-71971, -52302), (33698, 55920))),
    ('on', ((-26740, -21116), (-47606, -32902), (-83414, -51593))),
    ('on', ((35163, 49358), (-57959, -36064), (29918, 57157))),
    ('on', ((-7610, 15882), (31069, 43205), (50534, 76280))),
    ('on', ((-38397, -8880), (50925, 60954), (38695, 68136))),
    ('on', ((-22971, 3262), (63662, 94550), (-23890, -3669))),
    ('on', ((56919, 85184), (-24246, -10978), (-45500, -14062))),
    ('on', ((70576, 93606), (-3591, 16458), (12386, 39202))),
    ('on', ((-40810, -32824), (46441, 70619), (-50354, -41110))),
    ('on', ((-44090, -21796), (-49222, -29203), (-78625, -53659))),
    ('on', ((4179, 22689), (62208, 95078), (-32906, -2773))),
    ('on', ((41435, 58226), (-69091, -52534), (11220, 22466))),
    ('on', ((44027, 56489), (-61228, -40839), (24716, 49802))),
    ('on', ((58856, 89381), (-24787, -6210), (-38387, -21495))),
    ('on', ((31249, 66391), (-338, 29577), (-73616, -43844))),
    ('on', ((-69236, -35435), (-56932, -41334), (10510, 37433))),
    ('on', ((-30489, 7293), (23785, 50236), (-75453, -69050))),
    ('on', ((-44614, -24138), (-14044, 4035), (-80479, -57806))),
    ('on', ((75190, 96327), (-32, 21796), (-19982, 654))),
    ('on', ((-57769, -43737), (-43364, -27692), (26689, 48069))),
    ('on', ((-33705, -1437), (-50304, -33797), (-65845, -40680))),
    ('on', ((-78406, -40654), (42549, 59337), (-28001, -11767))),
    ('on', ((63318, 88223), (-16500, -422), (7937, 12185))),
    ('on', ((-86159, -71499), (10841, 35268), (-23323, 5521))),
    ('on', ((-69927, -48219), (-54626, -22479), (-44943, -15579))),
    ('on', ((-43768, -13251), (-64205, -52022), (-49650, -31322))),
    ('on', ((-66574, -54884), (17683, 44711), (31164, 56138))),
    ('on', ((72035, 82108), (-3813, 10230), (-2284, 15893))),
    ('on', ((37334, 58441), (51079, 61499), (18464, 27016))),
    ('on', ((-32585, -16545), (55965, 89671), (8302, 34498))),
    ('on', ((-26529, 3377), (-29123, -20453), (56842, 83561))),
    ('on', ((32146, 54092), (-35416, -9066), (51048, 69716))),
    ('on', ((-25194, 7525), (-78242, -62921), (-50241, -35907))),
    ('on', ((51949, 62077), (39590, 56347), (-31891, -19806))),
    ('on', ((2190, 18191), (-26549, -4898), (68835, 81165))),
    ('on', ((37501, 59670), (-54043, -24397), (18589, 44711))),
    ('on', ((53124, 84011), (-37865, -20884), (12749, 28642))),
    ('on', ((11469, 29443), (-87115, -71637), (16152, 46608))),
    ('on', ((-11034, 2944), (3487, 21169), (74689, 82882))),
    ('on', ((19100, 25746), (-61128, -36379), (43441, 71029))),
    ('on', ((5600, 38744), (-7945, 6683), (66027, 94407))),
    ('on', ((68461, 75284), (8717, 26700), (15336, 51188))),
    ('on', ((-61283, -47763), (2607, 39967), (37842, 70865))),
    ('on', ((-45729, -24681), (-21605, 549), (63515, 88818))),
    ('on', ((25798, 44610), (47822, 73500), (-60521, -23985))),
    ('on', ((-95305, -75665), (-26118, -5350), (-12906, 15434))),
    ('on', ((33757, 57435), (42302, 67655), (-54184, -23134))),
    ('on', ((2994, 22115), (-88253, -58648), (28386, 48449))),
    ('on', ((-62548, -49059), (-15737, 4824), (41511, 53585))),
    ('on', ((67083, 78970), (4211, 28190), (-48739, -19705))),
    ('on', ((-78667, -54791), (-46045, -26836), (24727, 53046))),
    ('on', ((54721, 85885), (-8372, 21818), (29648, 43363))),
    ('on', ((69627, 90635), (-20694, -18387), (7933, 32742))),
    ('on', ((-65893, -37568), (-11991, 15161), (-65829, -60748))),
    ('on', ((-57395, -46236), (-2048, 13172), (-70802, -56233))),
    ('on', ((-22043, 3715), (57559, 88108), (-45280, -34414))),
    ('on', ((-74828, -53038), (46478, 58430), (-19255, 10363))),
    ('on', ((13806, 37110), (33798, 59217), (-64375, -61548))),
    ('on', ((61, 4442), (-14980, 13830), (-81808, -73388))),
    ('on', ((-44428, -22458), (-30625, -10622), (-66261, -46437))),
    ('on', ((61389, 79075), (-55043, -35044), (-31620, -5849))),
    ('on', ((1257, 22335), (-92002, -65926), (23483, 35032))),
    ('on', ((-66071, -40860), (-871, 30120), (47036, 74284))),
    ('on', ((18446, 32639), (-16466, 3221), (-89695, -56843))),
    ('on', ((-4829, 18965), (-25609, -3292), (-83328, -71836))),
    ('on', ((-51528, -12497), (-36433, -10612), (67126, 82588))),
    ('on', ((-56346, -40152), (3846, 23474), (44670, 66145))),
    ('on', ((-31862, -23691), (-90559, -67842), (-35278, -9721))),
    ('on', ((-82636, -55468), (7393, 29473), (20855, 53140))),
    ('on', ((-23503, -10904), (-71671, -43413), (39526, 74530))),
    ('on', ((-24286, -10051), (42535, 69016), (47293, 59326))),
    ('on', ((27107, 36075), (-68197, -63740), (-38325, -23137))),
    ('on', ((49700, 61611), (-63668, -46517), (-32392, -27815))),
    ('on', ((8270, 28696), (50213, 72279), (-43392, -25307))),
    ('on', ((39641, 61962), (-20666, -417), (-81881, -48826))),
    ('on', ((12571, 33176), (-14528, 8290), (-89384, -70716))),
    ('on', ((-43871, -13117), (-39900, -7197), (59502, 90659))),
    ('on', ((-36035, -2433), (65658, 84996), (-33491, -14374))),
    ('on', ((63543, 80825), (-6748, -2651), (-58258, -19329))),
    ('on', ((28713, 46264), (3886, 14439), (-90710, -60973))),
    ('on', ((-22187, 2425), (54328, 74307), (28523, 62729))),
    ('on', ((-44284, -19454), (-77265, -62483), (-24166, 4845))),
    ('on', ((-3490, 10486), (-85697, -76511), (5917, 20496))),
    ('on', ((-24962, 2419), (11207, 27000), (61253, 96386))),
    ('on', ((52442, 59482), (-41524, -22315), (-68202, -48780))),
    ('on', ((-34407, 5096), (-92571, -67584), (-35286, -2042))),
    ('on', ((11100, 17929), (-19300, 4676), (58434, 88671))),
    ('on', ((60823, 86913), (-1593, 13586), (-3558, 26423))),
    ('on', ((-54273, -37709), (28937, 38483), (-62444, -46473))),
    ('on', ((-3663, 6115), (-67350, -58585), (-59265, -39858))),
    ('on', ((-33708, -26120), (62411, 80951), (-50679, -28890))),
    ('on', ((54088, 78257), (-30377, 5547), (-54962, -42452))),
    ('on', ((-51040, -15145), (-75083, -71823), (-7664, 22918))),
    ('on', ((-48121, -39943), (59649, 86399), (-19305, 14422))),
    ('on', ((19442, 39564), (65372, 89430), (-9881, 23180))),
    ('on', ((-5638, -504), (51726, 81303), (34865, 52668))),
    ('on', ((51177, 68510), (-55462, -49393), (-1676, 34025))),
    ('on', ((-39225, -13934), (-44638, -21274), (-69663, -61721))),
    ('on', ((-34256, -22300), (-79410, -50706), (18119, 42580))),
    ('on', ((28326, 43362), (-65829, -50909), (-58284, -26939))),
    ('on', ((-60717, -46351), (16976, 39679), (-47682, -36099))),
    ('on', ((-8972, -1099), (-52473, -25319), (-86121, -52942))),
    ('on', ((-61000, -39159), (49997, 78225), (-23148, 1003))),
    ('on', ((58182, 82981), (44518, 56895), (3777, 5095))),
    ('on', ((6734, 28162), (-86696, -58568), (-24484, -2036))),
    ('on', ((58887, 76977), (-39238, -25941), (39846, 46017))),
    ('on', ((24847, 30203), (-67085, -34859), (41924, 66616))),
    ('on', ((20441, 43585), (-92938, -64316), (-31009, -1794))),
    ('on', ((-80785, -61417), (-38919, -35032), (-36530, -28271))),
    ('on', ((59377, 75712), (43560, 68823), (-22599, -1614))),
    ('on', ((-1700, 13850), (-4069, 2130), (63749, 86953))),
    ('on', ((-4952, 16715), (41882, 73610), (-54756, -52305))),
    ('on', ((51595, 59284), (-24107, -4393), (-72363, -43891))),
    ('on', ((-27807, -3926), (26851, 45198), (49346, 82929))),
    ('on', ((12390, 34498), (63224, 91240), (-5214, 800))),
    ('on', ((10873, 42647), (-46607, -10385), (65246, 87490))),
    ('on', ((-62055, -38470), (-21876, 173), (-62808, -40393))),
    ('on', ((20224, 48752), (-38586, -16511), (-85733, -52651))),
    ('on', ((55784, 81552), (-5619, 16327), (34077, 51185))),
    ('on', ((-3455, 10014), (-85026, -65575), (-26623, -11858))),
    ('on', ((-35708, -27267), (-45850, -19818), (-67455, -45823))),
    ('on', ((41827, 53199), (41230, 65698), (27015, 50197))),
    ('on', ((-6012, 4252), (-72302, -66695), (36125, 47997))),
    ('on', ((49528, 64452), (-58166, -30694), (-13199, 4956))),
    ('on', ((9888, 29239), (-68554, -54138), (18724, 56782))),
    ('on', ((-68870, -53794), (-58759, -22882), (7742, 40403))),
    ('on', ((6972, 17377), (-20708, -6722), (-82963, -69421))),
    ('on', ((20367, 25651), (58345, 91004), (-20550, 10387))),
    ('on', ((25694, 35176), (22099, 43134), (-70032, -63879))),
    ('on', ((-45952, -11194), (-81779, -67800), (8182, 23824))),
    ('on', ((62509, 80195), (-21937, -2975), (5609, 20751))),
    ('on', ((-24032, -6383), (24506, 45121), (59690, 78556))),
    ('on', ((-51599, -38434), (30719, 51414), (36050, 73737))),
    ('on', ((58822, 68897), (7741, 15890), (-51938, -32193))),
    ('on', ((-15039, 6906), (-65212, -41797), (30699, 55624))),
    ('on', ((60817, 85926), (27886, 55706), (-8663, 11830))),
    ('on', ((15206, 34437), (30959, 54489), (57564, 71609))),
    ('on', ((35392, 53432), (22100, 27886), (-71711, -46618))),
    ('on', ((-63155, -33316), (2506, 33937), (53928, 70435))),
    ('on', ((39063, 66505), (25641, 56117), (-52530, -39376))),
    ('on', ((-25070, -14807), (-94850, -59369), (-15595, 12932))),
    ('on', ((-83108, -73279), (-39576, -1760), (-6745, 24559))),
    ('on', ((-18659, 1714), (65445, 79434), (39458, 61966))),
    ('on', ((-73934, -43865), (-53154, -30276), (-31417, -14432))),
    ('on', ((8399, 36820), (-5066, -746), (62811, 89658))),
    ('on', ((51461, 58467), (21289, 47244), (-48496, -34141))),
    ('on', ((-31677, -15125), (65258, 94618), (-11983, 21397))),
    ('on', ((-59850, -45075), (46471, 73073), (33142, 52196))),
    ('on', ((-38957, -29818), (40316, 50247), (45129, 64145))),
    ('on', ((-17719, 3143), (-99029, -70583), (-15275, -3260))),
    ('on', ((-20122, -5655), (-68173, -47607), (27797, 47630))),
    ('on', ((-77283, -55700), (852, 31360), (32087, 48207))),
    ('on', ((28846, 48388), (63096, 85300), (-30595, -3844))),
    ('on', ((-82363, -49209), (-51315, -42669), (-5472, 13974))),
    ('on', ((-33522, -24893), (54281, 60638), (-48809, -29636))),
    ('on', ((-72223, -48831), (-46560, -25806), (36517, 53330))),
    ('on', ((-49478, -43471), (-11706, 10889), (-80068, -54930))),
    ('on', ((-55073, -36710), (66679, 68786), (-21283, -7896))),
    ('on', ((23706, 37729), (15047, 43923), (-72897, -65979))),
    ('on', ((17181, 28459), (62283, 83521), (-31363, -8226))),
    ('on', ((-16143, 9900), (27489, 59106), (59096, 76947))),
    ('on', ((3206, 10671), (-14400, 10991), (-95245, -69938))),
    ('on', ((56347, 81552), (-25300, -8107), (19105, 50434))),
    ('on', ((-78103, -66259), (-37451, -32307), (-33713, -2616))),
    ('on', ((30350, 59481), (29541, 51913), (39794, 66802))),
    ('on', ((-6369, 27626), (29467, 54642), (-87761, -63038))),
    ('on', ((-75910, -44075), (8881, 33348), (39378, 53195))),
    ('on', ((-93870, -77120), (-4549, 11366), (10630, 21270))),
    ('on', ((63828, 86196), (7557, 26186), (-31651, -14082))),
    ('on', ((-45560, -23421), (-57108, -50195), (-46356, -35654))),
    ('on', ((27703, 38747), (-64773, -61912), (-50641, -19460))),
    ('on', ((-30255, -26778), (-36213, -16183), (-72571, -68332))),
    ('on', ((74470, 78456), (-25411, 13731), (9282, 44191))),
    ('on', ((60166, 74998), (-59027, -34355), (23594, 36628))),
    ('on', ((-34949, -18916), (48964, 60747), (-65291, -40385))),
    ('on', ((41085, 68564), (-51507, -22592), (-48642, -22967))),
    ('on', ((-61218, -38261), (-64826, -57227), (-40284, -2183))),
    ('on', ((-63449, -37989), (-39697, -27482), (-74092, -51129))),
    ('on', ((9363, 31975), (55098, 78687), (-52413, -40226))),
    ('on', ((-84308, -56837), (-40246, -7996), (-36362, -18607))),
    ('on', ((-72651, -66165), (9333, 15666), (25597, 51574))),
    ('on', ((17401, 47978), (9920, 42401), (-70754, -58041))),
    ('on', ((-63217, -51951), (-12225, 11075), (44022, 66562))),
    ('on', ((29053, 49545), (-84344, -63035), (-6015, 22142))),
    ('on', ((-71933, -39944), (23397, 41453), (-51539, -33412))),
    ('on', ((37569, 61597), (43450, 53548), (22047, 45919))),
    ('on', ((8968, 35041), (59910, 84105), (-52586, -33885))),
    ('on', ((-57379, -27352), (-41555, -18843), (54181, 60564))),
    ('off', ((-14944, 13704), (-58332, -46987), (52838, 63073))),
    ('on', ((-73816, -53118), (-14780, 2920), (-64505, -39848))),
    ('off', ((-39460, -353), (-51496, -30749), (46316, 63357))),
    ('on', ((-85117, -60538), (-36842, -15322), (-52531, -16603))),
    ('off', ((7991, 31176), (-73583, -52023), (32437, 48771))),
    ('off', ((8515, 30142), (-77709, -62651), (17831, 46909))),
    ('on', ((-18303, 17378), (-21032, -6623), (64638, 88783))),
    ('on', ((7339, 25764), (-90496, -66449), (-38251, -26490))),
    ('off', ((-70223, -46889), (4443, 35356), (-42714, -28833))),
    ('on', ((-77805, -50387), (43932, 53069), (-12411, -5379))),
    ('off', ((-72499, -45397), (-53542, -41435), (-3491, 21042))),
    ('on', ((10885, 19988), (-41497, -7678), (55702, 84296))),
    ('off', ((50943, 59682), (9775, 27593), (41418, 52240))),
    ('on', ((-5512, 31721), (74926, 78902), (-24035, -8858))),
    ('on', ((54750, 82645), (29855, 45661), (8586, 29144))),
    ('off', ((-78864, -55077), (6925, 16113), (-59924, -27087))),
    ('off', ((9337, 38246), (60440, 66216), (-47033, -39339))),
    ('on', ((-31403, -21142), (-21908, -8535), (-77524, -68441))),
    ('off', ((-48840, -15847), (-67498, -39602), (-67358, -37763))),
    ('off', ((-19834, 7437), (-20737, 16009), (-93797, -74007))),
    ('off', ((-61152, -39838), (52890, 67543), (-394, 22101))),
    ('on', ((-80448, -55372), (1276, 22349), (-50814, -32755))),
    ('off', ((44370, 73647), (-55877, -35324), (26221, 47034))),
    ('on', ((46532, 57702), (-13840, 3895), (-69576, -50251))),
    ('off', ((-73517, -57384), (31351, 41680), (15220, 23322))),
    ('on', ((31166, 41044), (-51591, -33043), (-75269, -52116))),
    ('on', ((-56761, -45567), (-54768, -32061), (-60838, -46237))),
    ('on', ((-75017, -54994), (-28885, -27479), (-19257, 8285))),
    ('off', ((17363, 19964), (-1700, 23699), (65227, 80609))),
    ('on', ((-72438, -53153), (33395, 60653), (-27435, 1947))),
    ('on', ((67153, 86947), (-39064, -13890), (-24067, -7025))),
    ('off', ((-23935, -7756), (54756, 73703), (-57803, -30333))),
    ('on', ((-94142, -68468), (-38295, -14233), (-2486, 8555))),
    ('off', ((-16941, 5265), (64250, 78153), (7680, 25578))),
    ('off', ((-96513, -66230), (-4640, 29008), (-10817, 10499))),
    ('on', ((-47541, -35822), (-56040, -37593), (25295, 56913))),
    ('off', ((32696, 49773), (-77640, -67246), (-32741, -2933))),
    ('on', ((60031, 96079), (-10285, 24947), (-23593, 3651))),
    ('off', ((60668, 82205), (4890, 26483), (-30306, 7631))),
    ('off', ((52550, 78640), (-65700, -48087), (-12117, 8780))),
    ('off', ((-30793, -2678), (-45649, -34548), (66170, 81785))),
    ('on', ((3954, 24104), (-77505, -64791), (-47133, -20347))),
    ('off', ((-60663, -48533), (30758, 43913), (38074, 52867))),
    ('off', ((29598, 55875), (62594, 74543), (-175, 18742))),
    ('on', ((7268, 15664), (64342, 81253), (-39177, -11209))),
    ('off', ((50616, 71417), (-7637, -11), (-65773, -35786))),
    ('off', ((-85212, -54719), (-45697, -20353), (-40912, -7219))),
    ('off', ((51683, 61140), (-16896, 8191), (56876, 63036))),
    ('on', ((63796, 81879), (-6590, 10629), (-17826, -13338))),
    ('off', ((-12462, 19923), (24812, 46240), (58581, 91722))),
    ('off', ((60238, 81783), (9597, 26586), (9422, 30485))),
    ('on', ((-50156, -28362), (28748, 53048), (51469, 66900))),
    ('off', ((69194, 89229), (-1108, 23127), (25684, 56099))),
    ('off', ((-84146, -57909), (-17501, 11445), (30089, 62555))),
    ('on', ((31618, 49715), (37591, 62455), (43947, 51429))),
    ('off', ((-3586, 19186), (69304, 92938), (-20587, -9138))),
    ('on', ((-61199, -46598), (35967, 60395), (-14556, 4590))),
    ('off', ((-10913, 14231), (-30261, 1009), (-84245, -76301))),
    ('off', ((60186, 89222), (-3692, 33740), (-25990, -8108))),
    ('on', ((36727, 54779), (43724, 59581), (27937, 65959))),
    ('on', ((31209, 44945), (42559, 57599), (39510, 49135))),
    ('on', ((-3245, 14976), (-72819, -52510), (36034, 64484))),
    ('on', ((440, 28782), (-11547, 4495), (-98435, -74377))),
    ('on', ((-18198, 10563), (-81024, -73403), (-17198, 5796))),
    ('on', ((12612, 21502), (-51647, -31132), (-59647, -51386))),
    ('on', ((29495, 52571), (11017, 19714), (46828, 68700))),
    ('on', ((9809, 37561), (-30853, -19860), (-83128, -60062))),
    ('off', ((67691, 79085), (-31154, 3105), (-37577, -17350))),
    ('on', ((72836, 97051), (-31514, -15790), (-29704, 1797))),
    ('on', ((-87609, -69341), (-18788, -2505), (-12297, -10409))),
    ('on', ((20443, 43548), (-62320, -37522), (38977, 60544))),
    ('off', ((-38964, -26257), (58268, 79198), (22960, 47406))),
    ('on', ((-73221, -48099), (-41579, -12744), (41233, 55998))),
    ('on', ((39815, 61968), (-25816, 2853), (-84604, -48176))),
    ('off', ((43328, 47847), (50145, 81706), (-20854, -17930))),
    ('on', ((42026, 55667), (2815, 18320), (-71420, -56114))),
    ('on', ((-15046, 7093), (-2067, 6846), (-87205, -62415))),
    ('off', ((-47170, -12892), (-70768, -49876), (15359, 40080))),
    ('off', ((-2457, 10461), (30411, 42007), (-81116, -70962))),
    ('off', ((52522, 85711), (-59582, -35527), (-16966, 8482))),
    ('on', ((-46197, -25909), (47222, 78261), (-50850, -32047))),
    ('off', ((19590, 34572), (72339, 87567), (-5750, 28633))),
    ('off', ((47115, 83953), (-18319, -1527), (36796, 53774))),
    ('off', ((-83826, -54856), (-42413, -32997), (3733, 27276))),
    ('on', ((-56233, -44250), (49602, 74071), (22314, 30759))),
    ('off', ((63420, 86367), (-10839, 17688), (-58166, -41413))),
    ('off', ((-52818, -25004), (30897, 65041), (34334, 65736))),
    ('off', ((-37943, -1255), (-31595, -17688), (-79911, -66116))),
    ('off', ((-53072, -34686), (-74173, -48306), (29767, 56394))),
    ('on', ((-52788, -31825), (-32369, -19858), (48905, 63632))),
    ('on', ((-1350, 29555), (-19635, -7074), (-87305, -65879))),
    ('off', ((-20803, -15829), (21850, 48686), (-81910, -49506))),
    ('off', ((6419, 36337), (-72720, -64997), (9779, 35669))),
    ('on', ((-27678, -5611), (-63057, -58292), (-49298, -38857))),
    ('on', ((-25232, -8560), (-36175, -7964), (-79251, -62089))),
    ('on', ((3484, 8094), (60295, 74830), (19467, 40876))),
    ('on', ((25344, 49707), (55996, 61107), (27573, 40860))),
    ('off', ((47919, 70340), (-21803, -8394), (-48605, -36363))),
    ('off', ((-46037, -33978), (47245, 79330), (-37903, -25173))),
    ('off', ((-71914, -46814), (2394, 17414), (-64968, -46103))),
    ('on', ((19065, 32293), (-81832, -70280), (-14026, 1070))),
    ('off', ((-38512, -31573), (47413, 61535), (37582, 62106))),
    ('on', ((48305, 70579), (-62027, -50478), (-15171, 1424))),
    ('off', ((-75249, -57569), (-35309, -10651), (33081, 55723))),
    ('on', ((25348, 44691), (-63608, -38147), (40069, 50336))),
    ('off', ((29076, 42828), (43230, 71477), (-50728, -30676))),
    ('off', ((-79502, -64190), (-38572, -26384), (-15092, 12199))),
    ('on', ((-23179, -7624), (48807, 73012), (33610, 40354))),
    ('on', ((-3592, 8389), (60961, 82397), (-49081, -28054))),
    ('off', ((51476, 83453), (28705, 56528), (-12926, 1967))),
    ('on', ((-27187, -19195), (-82395, -52994), (21622, 43848))),
    ('off', ((-90506, -68537), (-9823, 6672), (26454, 41372))),
    ('off', ((44140, 77814), (-53839, -33067), (19437, 52037))),
    ('off', ((70486, 89103), (-32008, -18702), (-30582, -3135))),
    ('off', ((9812, 37159), (-13683, 5581), (67454, 90785))),
    ('on', ((55516, 76011), (29943, 54363), (-35505, -8311))),
    ('on', ((18107, 53089), (40166, 76403), (-46033, -31026))),
    ('on', ((-44076, -28970), (-69649, -38867), (31937, 54687))),
    ('off', ((-6903, 6265), (-92551, -76965), (10824, 29131))),
    ('off', ((-73096, -47990), (-40737, -12561), (-56032, -37870))),
    ('off', ((-69834, -46771), (-11406, 9831), (-70442, -38701))),
    ('off', ((-63167, -28547), (-2453, 13753), (-73159, -51770))),
    ('off', ((-12546, -4517), (-90466, -67177), (-45521, -19870))),
    ('on', ((-29818, -1746), (50057, 67629), (41692, 53982))),
    ('on', ((-84294, -59113), (33649, 49960), (-514, 23937))),
    ('off', ((-57940, -53375), (17137, 29536), (-66645, -34791))),
    ('on', ((-45417, -13403), (-22323, 12972), (56661, 78987))),
    ('on', ((37008, 53186), (-52723, -32702), (-81286, -61118))),
    ('off', ((62401, 92686), (-32370, -8632), (3648, 32213))),
    ('on', ((46130, 54088), (12139, 21408), (60375, 72557))),
    ('on', ((-78284, -60622), (-60558, -34232), (3228, 21753))),
    ('off', ((-26367, -17693), (-44140, -38359), (-76315, -54921))),
    ('on', ((-50778, -25901), (-62396, -47707), (-46585, -24121))),
    ('on', ((-31891, -7439), (-38110, -6297), (-83562, -54313))),
    ('on', ((53088, 73992), (-40054, -10359), (37676, 54496))),
    ('off', ((16508, 40245), (-62074, -36376), (-71638, -56256))),
    ('off', ((41517, 56789), (31056, 37033), (41339, 66625))),
    ('off', ((-70827, -68212), (7248, 41853), (-32734, -16519))),
    ('off', ((32333, 52847), (-89957, -62307), (-5050, 6149))),
    ('off', ((-17149, -10468), (-32928, -9851), (56537, 82605))),
    ('on', ((-84541, -54098), (-58633, -36289), (-12748, 2668))),
    ('on', ((38782, 73823), (-47393, -38721), (16744, 50416))),
    ('off', ((39068, 59022), (21209, 55515), (34421, 52108))),
    ('on', ((-71216, -46104), (-73471, -55003), (-37496, -2060))),
    ('off', ((-42432, -23889), (-86804, -68846), (-3653, 23244))),
    ('off', ((-16056, 17364), (-72921, -54772), (-40563, -21696))),
    ('off', ((-25993, -10482), (18139, 45085), (-86836, -55465))),
    ('off', ((-6145, 6154), (15388, 23210), (-89142, -68482))),
    ('on', ((46085, 67991), (-73185, -44337), (-45070, -27405))),
    ('on', ((65191, 77310), (644, 12100), (6335, 26349))),
    ('on', ((61530, 80630), (33572, 40611), (3139, 25295))),
    ('off', ((-22306, -1057), (-64514, -54752), (50646, 59125))),
    ('off', ((-31245, 428), (-69703, -42002), (33460, 67700))),
    ('off', ((18783, 26105), (57879, 76612), (-46736, -17226))),
    ('on', ((65144, 85202), (-34414, -9442), (-15694, -3293))),
    ('on', ((-30025, -19969), (2384, 18772), (-85674, -56255))),
    ('on', ((-21671, -1706), (-88695, -66277), (-32871, -31219))),
    ('off', ((41938, 56563), (36056, 55655), (29417, 39627))),
    ('off', ((-35141, -13943), (51556, 73844), (12868, 28552))),
    ('off', ((-62811, -35918), (-44104, -21236), (35127, 62940))),
    ('on', ((62916, 82143), (7866, 27555), (17805, 50739))),
    ('on', ((29498, 66404), (-38144, -7002), (52432, 62757))),
    ('off', ((-40743, -17461), (-3977, 27203), (-82649, -69934))),
    ('on', ((61462, 87066), (-29424, 1075), (-53444, -28127))),
    ('off', ((-20296, 755), (-68543, -34376), (45810, 71640))),
    ('off', ((-69466, -36179), (-62860, -52547), (-31500, -5258))),
    ('off', ((44866, 53371), (-24236, -6665), (-73108, -53122))),
    ('off', ((-79007, -53057), (-17042, 5274), (22078, 36248))),
    ('off', ((-57167, -28268), (-51111, -32915), (-77704, -38825))),
    ('off', ((-4958, 9484), (5801, 13607), (74030, 98668))),
    ('on', ((-35563, -13589), (42209, 54631), (44769, 75384))),
    ('off', ((-60812, -37640), (-63777, -55796), (24372, 34208))),
    ('off', ((-46941, -16156), (-36595, -17426), (-79732, -64679))),
    ('on', ((-59888, -28115), (12521, 32347), (-78750, -58674))),
    ('on', ((72376, 82684), (4253, 30848), (-40351, -9522))),
    ('off', ((-32933, -1254), (-75313, -57763), (-49186, -39785))),
    ('on', ((23434, 55093), (46836, 66125), (36750, 49491))),
    ('on', ((-46482, -28852), (-3093, 26488), (52024, 72731))),
    ('on', ((43735, 78088), (-44597, -11422), (-45272, -31611))),
    ('off', ((9842, 13060), (-32334, -18544), (-81402, -71916))),
    ('on', ((4162, 7921), (-99019, -65156), (-19030, 4628))),
    ('on', ((54190, 69481), (-597, 28621), (-39799, -25080))),
    ('off', ((41810, 71069), (-60566, -49113), (-28756, -6676))),
    ('off', ((-79628, -67314), (-10495, 9141), (-1753, 22526))),
    ('on', ((-80854, -54338), (-47067, -35714), (-41157, -4068))),
    ('off', ((7961, 36511), (-68928, -39346), (42154, 66633))),
    ('on', ((55071, 86104), (-26491, -12993), (35080, 46483))),
    ('on', ((16937, 38277), (45614, 76853), (-68179, -32041))),
    ('on', ((-59142, -45042), (-44541, -15747), (38408, 54791))),
    ('on', ((-8928, 11676), (-46464, -33539), (-75322, -62649))),
    ('on', ((-25001, -1799), (60438, 82665), (-6409, 20165))),
    ('on', ((-73110, -45573), (-56868, -33358), (8495, 25515))),
    ('on', ((-1691, 18521), (60075, 85944), (-2617, 10836))),
    ('off', ((17339, 45519), (46033, 72006), (37649, 43076))),
    ('off', ((-79475, -70079), (3154, 12209), (-24437, -12055))),
    ('off', ((46696, 52595), (-51367, -22325), (-49480, -29533))),
    ('off', ((45715, 64763), (-22780, -16581), (-78193, -55110))),
    ('off', ((-16579, 2489), (-64160, -54806), (41992, 63536))),
    ('off', ((-55417, -30493), (-88205, -51837), (-3486, 19240))),
    (OFF, ((-77740, -75400), (-16116, 7915), (-31057, -18206))),
]


if __name__ == '__main__':
    print(part1())
    print(part2())
